/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package star.coremodule.web;

import star.coremodule.web.Bundle;
import com.teamdev.jxbrowser.browser.Browser;
import com.teamdev.jxbrowser.engine.Engine;
import com.teamdev.jxbrowser.engine.EngineOptions;
import com.teamdev.jxbrowser.engine.RenderingMode;
import com.teamdev.jxbrowser.view.swing.BrowserView;
import java.awt.BorderLayout;
import javax.swing.JPopupMenu;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

@TopComponent.Description(
        preferredID = "BrowserTopComponent",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_BrowserAction=Browser",
    "CTL_BrowserTopComponent=Browser Window",
    "HINT_BrowserTopComponent=This is a Browser window"
})
public final class BrowserTopComponent extends TopComponent {
    static {
        System.setProperty("jxbrowser.license.key", "Add your license key here");
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }

    private final Engine engine;
    private Browser browser;
    private BrowserView view;

    public BrowserTopComponent() {
        setName(Bundle.CTL_BrowserTopComponent());
        setToolTipText(Bundle.HINT_BrowserTopComponent());

        engine = Engine.newInstance(EngineOptions.newBuilder(RenderingMode.HARDWARE_ACCELERATED).build());
        setLayout(new BorderLayout());
    }

    protected final Engine getEngine() {
        return engine;
    }


    public final Browser getBrowser() {
        if (browser == null) {
            browser = createBrowser();
        }
        return browser;
    }

    protected Browser createBrowser() {
        return getEngine().newBrowser();
    }

    private BrowserView getView() {
        if (view == null) {
            view = createView();
        }
        return view;
    }

    private BrowserView createView() {
        return BrowserView.newInstance(getBrowser());
    }

    @Override
    protected void componentOpened() {
        if (getEngine().isClosed()) {
            throw new IllegalStateException("Browser has been closed and cannot be reused"); // NOI18N
        }
        add(createView(), BorderLayout.CENTER);
        super.componentOpened();
    }

    @Override
    protected void componentClosed() {
        super.componentClosed();
        getEngine().close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
